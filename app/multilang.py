# Available languages
LANGUAGES = {
    'en': 'English',
    'de': 'Deutsch'
}

# Translations dictionary
TRANSLATIONS = {
    'en': {
        'app_name': 'SQL Injection Demo',
        'home': 'Home',
        'vulnerable_login': 'Vulnerable Login',
        'safe_login': 'Safe Login',
        'products_search': 'Products Search',
        'how_it_works': 'How It Works',
        'username': 'Username',
        'password': 'Password',
        'login': 'Login',
        'login_successful': 'Login successful! Welcome, {}!',
        'admin_login': 'You are logged in as an admin!',
        'invalid_credentials': 'Invalid username or password!',
        'error': 'Error: {}',
        'search': 'Search',
        'sort_by': 'Sort by',
        'id': 'ID',
        'name': 'Name',
        'price': 'Price',
        'description': 'Description',
        'user_not_found': 'User not found.',
        'provide_user_id': 'Please provide a user ID.',
        'understanding_sql_injection': 'Understanding SQL Injection',
        'sql_injection_description': 'SQL Injection is a code injection technique that exploits security vulnerabilities in an application\'s software by inserting malicious SQL statements into entry fields for execution.',
        'common_techniques': 'Common SQL Injection Techniques',
        'auth_bypass': 'Authentication Bypass',
        'example': 'Example:',
        'example_explanation': 'When this is injected into a login form:',
        'or_true_explanation': 'The OR \'1\'=\'1\' always evaluates to true, causing the query to return results regardless of username or password.',
        'union_attack': 'UNION-Based Attacks',
        'union_explanation': 'UNION allows combining results from multiple SELECT statements:',
        'union_example': '\' UNION SELECT username, password FROM users--',
        'union_result': 'This can retrieve data from other tables in the database.',
        'blind_injection': 'Blind SQL Injection',
        'blind_explanation': 'Used when error messages are suppressed:',
        'blind_example': '\' OR (SELECT 1 FROM users WHERE username=\'admin\' AND SUBSTR(password,1,1)=\'a\')=1--',
        'blind_result': 'This allows extracting data character by character based on true/false conditions.',
        'language': 'Language',
        'detailed_explanation': 'Detailed SQL Injection Explanation',
        'prevention': 'Prevention Techniques',
        'param_queries': 'Parameterized Queries',
        'param_explanation': 'Use prepared statements with parameterized queries to separate SQL code from data.',
        'input_validation': 'Input Validation',
        'validation_explanation': 'Implement strict input validation on both client and server side.',
        'least_privilege': 'Principle of Least Privilege',
        'privilege_explanation': 'Database accounts used by applications should have minimal privileges.',
        'escape_chars': 'Escaping Special Characters',
        'escape_explanation': 'Properly escape special characters in user inputs before using them in SQL queries.',
        'orm': 'Use ORM Frameworks',
        'orm_explanation': 'Object-Relational Mapping frameworks often have built-in protection against SQL injection.',
        'waf': 'Web Application Firewall',
        'waf_explanation': 'Implement a WAF to filter out malicious SQL injection attempts.',
        'db_details': 'Database Details',
        'table_structure': 'Table Structure',
        'users_table': 'Users Table',
        'products_table': 'Products Table',
        'column': 'Column',
        'data_type': 'Data Type',
        'primary_key': 'Primary Key',
        'payload_examples': 'SQL Injection Payload Examples',
        'vulnerability_types': 'Types of SQL Injection Vulnerabilities',
        'error_based': 'Error-Based',
        'time_based': 'Time-Based',
        'out_of_band': 'Out-of-Band',
        'sql_injection_warning': 'This login form is vulnerable to SQL injection attacks.',
        'sql_injection_info': 'SQL Injection Information',
        'sql_injection_explanation': 'SQL injection is a code injection technique that exploits a security vulnerability in an application\'s software. It allows attackers to inject malicious SQL statements that can read, modify, or delete data from your database.',
        'examples': 'Examples',
        'educational_purpose_only': 'For educational purposes only. Never use these techniques on real applications.',
        'try_secure_login': 'Try Secure Login',
        'prevention_tips': 'Prevention Tips',
        'use_parameterized_queries': 'Use parameterized queries',
        'least_privilege_principle': 'Apply the principle of least privilege',
        'use_orm': 'Use ORM frameworks',
    },
    'de': {
        'app_name': 'SQL-Injection Demo',
        'home': 'Startseite',
        'vulnerable_login': 'Angreifbares Login',
        'safe_login': 'Sicheres Login',
        'products_search': 'Produktsuche',
        'how_it_works': 'Wie es funktioniert',
        'username': 'Benutzername',
        'password': 'Passwort',
        'login': 'Anmelden',
        'login_successful': 'Anmeldung erfolgreich! Willkommen, {}!',
        'admin_login': 'Sie sind als Administrator angemeldet!',
        'invalid_credentials': 'Ungültiger Benutzername oder Passwort!',
        'error': 'Fehler: {}',
        'search': 'Suchen',
        'sort_by': 'Sortieren nach',
        'id': 'ID',
        'name': 'Name',
        'price': 'Preis',
        'description': 'Beschreibung',
        'user_not_found': 'Benutzer nicht gefunden.',
        'provide_user_id': 'Bitte geben Sie eine Benutzer-ID an.',
        'understanding_sql_injection': 'SQL-Injection verstehen',
        'sql_injection_description': 'SQL-Injection ist eine Code-Injektionstechnik, die Sicherheitslücken in der Software einer Anwendung ausnutzt, indem bösartige SQL-Anweisungen in Eingabefelder eingefügt werden.',
        'common_techniques': 'Häufige SQL-Injection-Techniken',
        'auth_bypass': 'Authentifizierungsumgehung',
        'example': 'Beispiel:',
        'example_explanation': 'Wenn dies in ein Anmeldeformular injiziert wird:',
        'or_true_explanation': 'Das OR \'1\'=\'1\' wird immer als wahr ausgewertet, was dazu führt, dass die Abfrage unabhängig von Benutzername oder Passwort Ergebnisse zurückgibt.',
        'union_attack': 'UNION-basierte Angriffe',
        'union_explanation': 'UNION ermöglicht die Kombination von Ergebnissen aus mehreren SELECT-Anweisungen:',
        'union_example': '\' UNION SELECT username, password FROM users--',
        'union_result': 'Dies kann Daten aus anderen Tabellen in der Datenbank abrufen.',
        'blind_injection': 'Blinde SQL-Injection',
        'blind_explanation': 'Wird verwendet, wenn Fehlermeldungen unterdrückt werden:',
        'blind_example': '\' OR (SELECT 1 FROM users WHERE username=\'admin\' AND SUBSTR(password,1,1)=\'a\')=1--',
        'blind_result': 'Dies ermöglicht die Extraktion von Daten Zeichen für Zeichen basierend auf Wahr/Falsch-Bedingungen.',
        'language': 'Sprache',
        'detailed_explanation': 'Detaillierte Erklärung zur SQL-Injection',
        'prevention': 'Präventionsmaßnahmen',
        'param_queries': 'Parametrisierte Abfragen',
        'param_explanation': 'Verwenden Sie vorbereitete Anweisungen mit parametrisierten Abfragen, um SQL-Code von Daten zu trennen.',
        'input_validation': 'Eingabevalidierung',
        'validation_explanation': 'Implementieren Sie eine strenge Eingabevalidierung sowohl auf Client- als auch auf Serverseite.',
        'least_privilege': 'Prinzip der geringsten Privilegien',
        'privilege_explanation': 'Von Anwendungen verwendete Datenbankkonten sollten minimale Berechtigungen haben.',
        'escape_chars': 'Escapen von Sonderzeichen',
        'escape_explanation': 'Sonderzeichen in Benutzereingaben richtig escapen, bevor sie in SQL-Abfragen verwendet werden.',
        'orm': 'ORM-Frameworks verwenden',
        'orm_explanation': 'Object-Relational-Mapping-Frameworks bieten oft eingebauten Schutz gegen SQL-Injection.',
        'waf': 'Web Application Firewall',
        'waf_explanation': 'Implementieren Sie eine WAF, um bösartige SQL-Injection-Versuche zu filtern.',
        'db_details': 'Datenbankdetails',
        'table_structure': 'Tabellenstruktur',
        'users_table': 'Benutzertabelle',
        'products_table': 'Produkttabelle',
        'column': 'Spalte',
        'data_type': 'Datentyp',
        'primary_key': 'Primärschlüssel',
        'payload_examples': 'SQL-Injection-Payload-Beispiele',
        'vulnerability_types': 'Arten von SQL-Injection-Schwachstellen',
        'error_based': 'Fehlerbasiert',
        'time_based': 'Zeitbasiert',
        'out_of_band': 'Out-of-Band',
        'sql_injection_warning': 'Dieses Anmeldeformular ist anfällig für SQL-Injection-Angriffe.',
        'sql_injection_info': 'SQL-Injection Informationen',
        'sql_injection_explanation': 'SQL-Injection ist eine Code-Injektionstechnik, die eine Sicherheitslücke in der Software einer Anwendung ausnutzt. Sie ermöglicht Angreifern, bösartige SQL-Anweisungen einzufügen, die Daten aus Ihrer Datenbank lesen, ändern oder löschen können.',
        'examples': 'Beispiele',
        'educational_purpose_only': 'Nur für Bildungszwecke. Verwenden Sie diese Techniken niemals bei echten Anwendungen.',
        'try_secure_login': 'Sicheres Login ausprobieren',
        'prevention_tips': 'Präventionstipps',
        'use_parameterized_queries': 'Verwenden Sie parametrisierte Abfragen',
        'least_privilege_principle': 'Wenden Sie das Prinzip der geringsten Berechtigung an',
        'use_orm': 'Verwenden Sie ORM-Frameworks'
    }
}

def get_locale():
    # Get language from session or use default
    return session.get('language', 'en')

def get_text(key, *args):
    """Get translated text for a given key"""
    try:
        return TRANSLATIONS[get_locale()][key].format(*args)
    except (KeyError, IndexError):
        # Fallback to English if translation is missing
        try:
            return TRANSLATIONS['en'][key].format(*args)
        except (KeyError, IndexError):
            return f"Missing translation: {key}"

